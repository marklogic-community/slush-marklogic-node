# @sample-app-name

This application was generated with the [Slush-MarkLogic-Node](https://github.com/marklogic/slush-marklogic-node)
generator, and uses the following components:

- [AngularJS](https://angularjs.org/)
- [Gulp](http://gulpjs.com/)
- [node.js](http://nodejs.org/): very thin layer, hosting the Angular code and proxying MarkLogic REST API requests
- [ml-gradle](https://github.com/marklogic-community/ml-gradle): configure MarkLogic databases, app-servers, users & roles.  Deploy rest extensions and modules.

## Install Required Dependencies

To deploy and run the application you need:

- [node.js v0.10+](http://nodejs.org/download/)
- [npm v2+](https://www.npmjs.com/): Built-in package manager for node (comes with node)
- [gulp](http://gulpjs.com/): Javascript task automation (`npm install -g gulp`)
- [Bower](http://bower.io/): A package manager for front-end libraries (`npm install -g bower`)
- [Git](https://git-scm.com/) - Roxy depends on this version control system

Note: the `node` command has been renamed to `nodejs`. Some dependencies still point to `node`, which is out of our control.
You may need to manually alias those commands, or install the `node-legacy` package.

Microsoft Windows users should also read the [Additional Microsoft Windows Requirements](WINDOWS.mdown).

## Quick Start (for the Impatient)

On Mac or Linux:

    npm install
    bower install
    gulp init-local
    ./gradlew mlDeploy
    ./gradlew importSampleData

On Windows:

    npm install
    bower install
    gulp init-local
    gradlew.bat mlDeploy
    gradlew.bat importSampleData

## Prepare your Application

Go to the generated application directory:

    cd <app-name>

The generator installs NodeJS and JavaScript dependencies automatically,
but if shared among colleagues, they likely need to run the following commands
manually:

    npm install
    bower install

The generator also creates a `local.json` and a `deploy/local.properties`, but
those are usually gitignored. Check if they exist. If they do, check the settings,
most importantly the port settings to make sure they list available ports. If
those files don't exist, then use the following command to create them:

    gulp init-local

Note: you can use `gulp init-dev` and `gulp init-prod` to setup properties for
the dev and prod environments.

Note: the deploy properties allow tweaking the MarkLogic side of the application
in great detail. Look inside `deploy/build.properties` or the documentation of
the [Roxy deployer](https://github.com/marklogic/roxy) to learn more about this.

Note: consider editing the `_loginMode` variable in `ui/app/login/login.service.js`
to change the login mode of the application. The default is set to `full`. The
other options are `top-right` or `modal`.

## Deploy your Application

Run the following ml-gradle commands to deploy the application to the chosen MarkLogic
installation. It will create and configure databases, REST servers, users, and
roles for you, and deploy the back-end application code.

    ./gradlew mlDeploy -PenvironmentName=[local|dev|prod]

Or on Windows:

    gradlew.bat mlDeploy -PenvironmentName=[local|dev|prod]

## Launch your Application

To launch the middle-tier, and open a browser tab automatically, you only need to run:

    gulp serve-local

Note: this will also watch the `ui/` folder for changes, compile them, and reload the
browser fully automatically.

Note: to get more debug logging from Express, run with:

    DEBUG=http,mail,express:* gulp serve-local

Note: it is possible to override settings on the command-line:

    gulp serve-local --ml-host=<your-host> --ml-http-port=8234 --app-port=9234 --nosync

Note: `--nosync` will cause no extra browsersync reload proxy to get launched at 3000,
and no browser tab will be opened automatically. In addition you have `--verbose`, and
`--ignoreErrors` (for `gulp build`). A few more flags are documented at the top of
`gulpfile.js`.

## Loading Sample Data (optional)

The application comes with 3000 JSON documents generated by json-generator.com. They
will allow you to explore all the features you get out of the box in a better way. You
can load them with (MLCP)[https://docs.marklogic.com/guide/ingestion/content-pump] using
ml-gradle.

    ./gradlew importSampleData

Or on Windows:

    gradlew.bat importSampleData

Note: the detail controller, the part that handles showing your data, can not only
handle JSON, but also XML, Binary, and Text data out of the box.

## Deployment on Server

At some point you might want to deploy and run this as a service on some
(demo) server. For details on that see [INSTALL.mdown](INSTALL.mdown).

## Next Steps

Documentation about the slush generator is provided on the [Generator Wiki](https://github.com/marklogic/slush-marklogic-node/wiki). It covers amongst others:

- [Project folder structure](https://github.com/marklogic/slush-marklogic-node/wiki/Project-folder-structure), which describes the project directory as produces by the generator.

- [Explaining the stack](https://github.com/marklogic/slush-marklogic-node/wiki/Explaining-the-stack), which gives a brief description of the overall architecture.

- [Core Tools and Components](https://github.com/marklogic/slush-marklogic-node/wiki/Core-Tools-and-Components), which allows you to learn more about the various tools and components used by or for the application.

- [Production Deployments](https://github.com/marklogic/slush-marklogic-node/wiki/Run-In-Production), which helps you understand best practices when deploying to a production environment

Last but not least, the landing page of the out of the box application provides many more links.
